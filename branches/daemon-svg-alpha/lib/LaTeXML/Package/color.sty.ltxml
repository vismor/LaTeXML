# -*- CPERL -*-
# /=====================================================================\ #
# |  color                                                              | #
# | Implementation for LaTeXML                                          | #
# |=====================================================================| #
# | Part of LaTeXML:                                                    | #
# |  Public domain software, produced as part of work done by the       | #
# |  United States Government & not subject to copyright in the US.     | #
# |---------------------------------------------------------------------| #
# | Bruce Miller <bruce.miller@nist.gov>                        #_#     | #
# | http://dlmf.nist.gov/LaTeXML/                              (o o)    | #
# \=========================================================ooo==U==ooo=/ #
package LaTeXML::Package::Pool;
use strict;
use LaTeXML::Package;
use LaTeXML::Util::Color;
#======================================================================
# Ignorable options (mostly drivers)
foreach my $option (qw(monochrome debugshow dvipdf dvipdfm dvipdfmx pdftex xetex
		       dvipsone dviwindo emtex dviwin textures pctexps pctexwin
		       pctexhp pctex32 truetex tcidvi vtex nodvipsnames
		       usenames)){
  DeclareOption($option,undef); }

# options that want the dvipsnam definitions
foreach my $option (qw(dvips xdvi oztex dvipsnames)){
  DeclareOption($option,sub {
		  InputDefinitions('dvipsnam',type=>'def')
		    || Warn(":unexpected:missing:dvipsnam Couldn't find dvipsnam.def color definitions");
		return; }); }

#======================================================================
# are there default named colors that we should be loading?

DefPrimitive('\definecolor{}{}{}', sub {
  my($stomach,$name,$model,$color)=@_;
  AssignValue('color_'.ToString($name) => getColor($model,$color)); });

# I don't think this is quite right, but...
# [I think we need do do something like "named_color_".$name
#  and corresponding changes to getColor, as well?
DefPrimitive('\DefineNamedColor{}{}{}{}', sub {
 my($stomach,$dmodel,$name,$model,$color)=@_;
 AssignValue('color_'.ToString($name),getColor($model,$color)); });

# change this to something like ConvertColor... Oh, already have that?
sub getColor {
  my($model,$spec) = @_;
  $model = ToString($model);
  $spec = ToString($spec);
  if(!$model || ($model eq 'named')){
    while(my $c = LookupValue('color_'.$spec)){
      $spec = $c; }
    $spec; }
  elsif($model){
    ConvertColor(ToString($model), $spec); }
  else {
    $spec; }}

# \color{name} or \color[model]{spec}
DefPrimitive('\color[]{}', sub {
  my($stomach,$model,$spec)=@_;
  my $color = getColor($model, $spec);
  AssignValue('preambleTextcolor', $color) if LookupValue('inPreamble');
  MergeFont(color=>$color);
  Box(undef,undef,undef,Invocation(T_CS('\color'),@_[1..$#_])); });

#\pagecolor{name} or \pagecolor[model]{spec}
DefPrimitive('\pagecolor[]{}', sub {
  my($stomach,$model,$spec)=@_;
  MergeFont(background=>getColor($model, $spec));
  Box(undef,undef,undef,Invocation(T_CS('\pagecolor'),@_[1..$#_])); });

# NOTE: the color in effect at \begin{document} will be returned by \normalcolor
# Do other font properties act this way?
DefPrimitive('\normalcolor', sub {
  my $color = (LookupValue('preambleTextcolor') || 'black');
  MergeFont(color=>$color); });

#\textcolor{name}{text} or \textcolor[model]{spec}{text}
DefMacro('\textcolor[]{}{}', '{\color[#1]{#2}#3}');

#\colorbox{name}{text} or \colorbox[model]{spec}{text}
DefMacro('\colorbox[]{}{}', '{\pagecolor[#1]{#2}#3}');

#\fcolorbox{name}{text} or \fcolorbox[model]{spec}{text}
DefMacro('\fcolorbox[]{}{}{}','{\color[#1]{#2}\framebox{\pagecolor[#1]{#3}#4}}');

#********************************************************************************
ProcessOptions();
1;
