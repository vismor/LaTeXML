#!/usr/bin/perl

use Mojolicious::Lite;
use lib "lib";
use LaTeXML::Util::Startup;
use LaTeXML::Util::Extras;
use LaTeXML::Daemon;
use Archive::Zip;
use File::Path;
use Data::Dumper;
use feature 'switch';

our $version = '0.1';
our $dbfile  = '.LaTeXML_Mojo.cache';

$ENV{MOJO_HOME} = '.' unless defined $ENV{MOJO_HOME};
$ENV{MOJO_MAX_MESSAGE_SIZE} = 10485760; # 10 MB file upload limit

# Make signed cookies secure
app->secret('LaTeXML is the way to go!');

#Prep a LaTeXML Startup instance
my $startup =
  LaTeXML::Util::Startup->new(dbfile => $ENV{MOJO_HOME} . '/' . $dbfile);

# Do a one-time check for admin, add if none:
print $startup->modify_user('admin', 'admin', 'admin')
  unless $startup->exists_user('admin');

# Adapted From: http://th.atguy.com/mycode/generate_random_string/
my @rchars=('a'..'z','A'..'Z');
helper rand_str => sub {
  my ($self,$length)=@_;
  my $random_string;
  foreach (1..$length) {
    # rand @chars will generate a random 
    # number between 0 and scalar @chars
    $random_string.=$rchars[rand @rchars];
  }
  return $random_string;
};

helper prepare_options => sub {
  my ($self, $opt) = @_;
  if (!defined $opt->{profile}) {
    if (defined $opt->{user}
      && $startup->verify_user($opt->{user}, $opt->{password}))
    {
      $opt->{profile} =
        $startup->lookup_user_property($opt->{user}, 'default') || 'custom';
    }
    else {
      $opt->{profile} = 'custom';
    }
  }
  $opt->{identity} =
    "Mojo for LaTeXML, v$version; Profile: " . $opt->{profile};
  delete $opt->{procs_post};
  if ($opt->{pmml}) { $opt->{procs_post}->{pmml} = 1; delete $opt->{pmml}; }
  if ($opt->{cmml}) { $opt->{procs_post}->{cmml} = 1; delete $opt->{cmml}; }
  if ($opt->{keepTeX}) {
    $opt->{procs_post}->{keepTeX} = 1;
    delete $opt->{keepTeX};
  }
  return $opt;
};

post '/convert' => sub {
  my $self  = shift;
  my $param = $self->req->body_params;
  #TODO: Make sure lists go to array refs, etc.
  my $opt = {};
  foreach ($param->param) { $opt->{lc($_)} = $param->param($_) || 1; }
  $opt = $self->prepare_options($opt);

  # TeX is data, separate
  my $tex = $opt->{tex};
  delete $opt->{tex};

  # We now have a LaTeXML options object - $opt.
  my $daemon = $startup->find_daemon($opt);

  #Override/extend with session-specific options in $opt:
  $daemon->prepare_session($opt);

  #Send a request:
  my $response = $daemon->convert($tex);
  my ($result, $status, $log);
  if (defined $response) {
    ($result, $status, $log) = map { $response->{$_} } qw(result status log);
  }
  # Delete daemon if Fatal occurred
  undef $daemon unless defined $result;

  # Serialize XML for output:
  $result = $result->toString(1) if defined $result;

  $self->render(json => {result => $result, status => $status, log => $log});
};

get '/login' => sub {
  my $self = shift;
  my $name = $self->param('name') || '';
  my $pass = $self->param('pass') || '';
  return $self->render
    unless ($startup->verify_user($name, $pass) eq 'admin');
  $self->session(name => $name);
  $self->flash(message => "Thanks for logging in $name!");
  $self->redirect_to('admin');
} => 'login';

get '/about' => sub {
  my $self    = shift;
  my $headers = Mojo::Headers->new;
  $headers->add('Content-Type', 'application/xhtml+xml');
  $self->res->content->headers($headers);
  $self->render();
} => 'about';

get '/demo' => sub {
  my $self = shift;
} => 'demo';

get '/editor' => sub {
  my $self    = shift;
  my $headers = Mojo::Headers->new;
  $headers->add('Content-Type', 'application/xhtml+xml');
  $self->res->content->headers($headers);
  $self->render();
} => 'editor';

get '/' => sub {
  my $self = shift;
  return $self->redirect_to('about');
};

get '/logout' => sub {
  my $self = shift;
  $self->session(expires => 1);
  $self->flash(message => "Successfully logged out!");
  $self->redirect_to('login');
};

get '/admin' => sub {
  my $self = shift;
  return $self->redirect_to('login') unless $self->session('name');
  $self->stash(startup => $startup);
  $self->render;
} => 'admin';

get '/help' => sub {
  my $self = shift;
  $self->render;
} => 'help';


get '/upload' => sub {
  my $self = shift;
  $self->render;
} => 'upload';

post '/upload' => sub {
  my $self = shift;
  # # TODO: Need a session?
  # my $headers = $self->req->headers;
  # my $type = $headers->header('x-file-type');
  # if ($type && $type =~ 'zip' && ($headers->header('content-type') eq 'multipart/form-data')) {
  #   #.zip (can't support others for now)
  #   my $zipcontent = $self->req->body;
  #   my $rname = $self->rand_str(6);
  #   #TODO: This is a Unix treatment, make it scale under windows! (CPAN module?)
  #   my $rdir = "/tmp/$rname/";
  #   mkdir $rdir;
  #   $rname = $rname.".zip";
  #   open ZIP, ">", $rdir.$rname;
  #   print ZIP $zipcontent;
  #   close ZIP;
  #   `cd $rdir; unzip -o $rname`;
  #   #Add $rdir to LaTeXML path, convert with standard profile.    
  #   my $opt = {profile=>'standard', paths=>[$rdir]};
  #   $opt = $self->prepare_options($opt);
  #   my $daemon = $startup->find_daemon($opt);
  #   #Override/extend with session-specific options in $opt:
  #   $daemon->prepare_session($opt);
  #   #Send a request:
  #   my $response = $daemon->convert($rdir.$rname);
  #   if (defined $response) {
  #     my ($result, $status, $log) = map { $response->{$_} } qw(result status log);
  #     print Dumper($result);
  #   }
  #   File::Path::remove_tree($rdir);
  #   $self->render(text=>"Uploaded!");
  # } else {
  #   #.tex , .sty , .jpg and so on - write to filesystem (when are we done?)
   $self->render(text=>"Uploaded, but ignored!");
  # }
};

any '/ajax' => sub {
  my $self = shift;
  return $self->redirect_to('login') unless $self->session('name');
  my $header = $self->req->headers->header('X-Requested-With');
  if ($header && $header eq 'XMLHttpRequest') {

    # Users API:
    if ($self->param('user_action')) {
      my $name    = $self->param('name');
      my $message = 'This request was empty, please resend with Name set!';
      given ($self->param('user_action')) {
        when ('modify') {
          if ($name) {
            my $pass    = $self->param('pass');
            my $role    = $self->param('role');
            my $default = $self->param('default_profile');
            $message = $startup->modify_user($name, $pass, $role, $default);
          }
        }
        when ('add') {
          if ($name) {
            my $pass    = $self->param('pass');
            my $role    = $self->param('role');
            my $default = $self->param('default_profile');
            $message = $startup->modify_user($name, $pass, $role, $default);
          }
        }
        when ('delete') { $message = $startup->delete_user($name) if $name; }
        when ('startup_users') {
          $self->render(
            json => {
              users => $startup->users
            }
          );
        }
        when ('overview_users') {
          my $users   = $startup->users;
          my $summary = [];
          push @$summary, $startup->summary_user($_) foreach (@$users);
          $self->render(json => {users => $users, summary => $summary});
        }
        default { $message = "Unrecognized Profile Action!" }
      };
      $self->render(json => {message => $message});
    }

    # Profiles API:
    if ($self->param('profile_action')) {
      my $message =
        'This request was empty, please resend with profile_action set!';
      given ($self->param('profile_action')) {
        when ('startup_profiles') {
          $self->render(
            json => {
              profiles => [@{$startup->profiles}]
            }
          );
        }
        when ('select') {
          my $pname = $self->param('profile_name');
          $self->render(json => {message => 'Please provide a profile name!'})
            unless $pname;
          my $form  = $startup->summary_profile($pname);
          my $lines = 0;
          $lines++ while ($form =~ /<[tb]r/g);
          my $minh = "min-height: " . ($lines * 5) . "px;";
          my $message = "Selected profile: " . $pname;
          use Mojo::JSON;
          my $json = Mojo::JSON->new;
          open TMP, ">", "/tmp/json.txt";
          print TMP $json->encode(
            {form => $form, style => $minh, message => $message});
          close TMP;
          $self->render(
            text => $json->encode(
              {form => $form, style => $minh, message => $message}
            )
          );
        }
        default {
          $self->render(
            json => {
              message => "Unrecognized Profile Action!"
            }
            )
        }
      };
      $self->render(json => {message => $message});
    }

    # General Actions API:

  }
  else {
    $self->render(text => "Only AJAX request are accepted at this route!\n");
  }
};

app->start;
__END__

=pod

=head1 NAME

C<ltxmojo> - A web server for the LaTeXML suite.

=head1 DESCRIPTION

L<ltxmojo> is a Mojolicious::Lite web application that builds on LateXML::Daemon to provide
on demand TeX to XML conversion as a scalable web service.

The service comes together with a collection of convenient interfaces, conversion examples,
as well as an administration system for user and transformation profile management.

=head1 ROUTES

The following routes are supported:

=over 4

=item C< / >

Root route, redirects to /about

=item C</about>

On HTTP GET, provides a brief summary of the web service functionality.

=item C</admin>

On HTTP GET, provides an administrative interface for managing user and profile data, as well
as to examine the overal system status.

=item C</ajax>

Manages AJAX requests for all administrative (and NOT conversion) tasks.

=item C</convert>

Accepts HTTP POST requests to perform conversion jobs.

The request syntax supports the normal key=value option fields for L<LaTeXML::Daemon>.

Additionally, one can request embeddable snippets via I<embed=1>,
 as well as forced xml:id attributes on every element via I<force_ids=1>.
Supported via L<LaTeXML::Util::Extras>.

The most significant enhancements are in provdiding options for user and conversion profiles,
namely I<user=string>, I<password=string> and I<profile=string>.
Based on the sessioning functionality enabled by L<LaTeXML::Util::Startup>, a user can now
easily perform conversions based on his custom preferences. Moreover, conversion profiles allow
for users to obtain the desired transformation setup with just specifying a single "profile" field.
For a list of predefined profiles, consult L<LaTeXML::Util::Startup>.

The actual TeX/LaTeX source to be converted should be sent serialized as C<tex=content>.

=item C</editor>

Provides an AJAX and jQuery-based editor, originally created by Heinrich Stamerjohanns,
to showcase on-the-fly conversion of LaTeX snippets to XHTML.
A set of illustrating examples is provided, as well as a
convenient integration with LaTeXML::Daemon's log and status reports.

A jQuery conversion request is as simple as:

 $.post("/convert", { "tex": tex, "profile":"fragment"});

=item C</help>

Help page, providing a guide through the site's functionality.

=item C</login>

A simple login interface.

=item C</logout>

A simple logout route that ends the current session.

=item C</upload>

On HTTP GET, this route provides an interface for converting LaTeX files, or entire setups,
by accepting .zip and .tar.gz archives, as well as mutlipart uploads of several file fragments,
as long as no subdirectories are present. Note that this is achieved with HTML5's native support
for multipart file uploads, hence a modern browser is required.

On HTTP POST, the uploaded bundle is converted by the server, returning an archive with the result.

=back

=head1 DEPLOYMENT

Installation and deployment are described in detail in LaTeXML/webapp/INSTALL.

As a rule of thumb, the regular deployment process for Mojolicious apps applies.


=head1 SEE ALSO

L<latexmls>, L<latexmlc>, L<LaTeXML::Daemon>

=head1 AUTHOR

Deyan Ginev <d.ginev@jacobs-university.de>

=head1 COPYRIGHT

Public domain software, produced as part of work done by the
United States Government & not subject to copyright in the US.

=cut
